import os
import sqlite3
from simple_term_menu import TerminalMenu  # Add this line to import TerminalMenu


def initialize_database(project_directory_path):
    database_path = os.path.join(project_directory_path, "project_database.db")
    if not os.path.exists(database_path):
        try:
            conn = sqlite3.connect(database_path)
            c = conn.cursor()
            c.execute('''CREATE TABLE IF NOT EXISTS targets (ip TEXT)''')
            conn.commit()
            print("Database initialized successfully.")
        except sqlite3.Error as e:
            print("Error initializing database:", e)
        finally:
            if conn:
                conn.close()
    else:
        print("Database already exists.")

def add_ips_to_database(project_directory_path):
    if not project_directory_path:
        print("Project directory path is not set.")
        return

    target_ips = input("Enter the list of IP addresses (including subnets), separated by commas: ")
    ips_list = target_ips.split(",")
    database_path = os.path.join(project_directory_path, "project_database.db")
    try:
        conn = sqlite3.connect(database_path)
        c = conn.cursor()
        for ip in ips_list:
            c.execute("INSERT INTO targets (ip) VALUES (?)", (ip.strip(),))
        conn.commit()
        print("IPs added to the database.")
    except sqlite3.Error as e:
        print("Error adding IPs to database:", e)
    finally:
        if conn:
            conn.close()

def open_and_append_file(project_directory_path):
    if not project_directory_path:
        print("Project directory path is not set.")
        return

    file_path = input("Enter the path of the file to open: ")
    try:
        with open(file_path, "r") as f:
            ips = f.readlines()
        database_path = os.path.join(project_directory_path, "project_database.db")
        conn = sqlite3.connect(database_path)
        c = conn.cursor()
        for ip in ips:
            c.execute("INSERT INTO targets (ip) VALUES (?)", (ip.strip(),))
        conn.commit()
        print("IPs added to the database.")
    except FileNotFoundError:
        print("File not found.")
    except sqlite3.Error as e:
        print("Error adding IPs to database:", e)
    finally:
        if conn:
            conn.close()

def remove_single_target(project_directory_path):
    if not project_directory_path:
        print("Project directory path is not set.")
        return

    target_to_remove = input("Enter the IP to remove: ")
    database_path = os.path.join(project_directory_path, "project_database.db")
    try:
        conn = sqlite3.connect(database_path)
        c = conn.cursor()
        c.execute("DELETE FROM targets WHERE ip=?", (target_to_remove,))
        conn.commit()
        print("Target removed successfully.")
    except sqlite3.Error as e:
        print("Error removing target:", e)
    finally:
        if conn:
            conn.close()

def remove_all_targets(project_directory_path):
    if not project_directory_path:
        print("Project directory path is not set.")
        return

    confirmation = input("Are you sure you want to remove all targets? (yes/no): ")
    if confirmation.lower() == "yes":
        database_path = os.path.join(project_directory_path, "project_database.db")
        try:
            conn = sqlite3.connect(database_path)
            c = conn.cursor()
            c.execute("DELETE FROM targets")
            conn.commit()
            print("All targets removed successfully.")
        except sqlite3.Error as e:
            print("Error removing all targets:", e)
        finally:
            if conn:
                conn.close()
    elif confirmation.lower() == "no":
        print("No targets were removed.")
    else:
        print("Invalid choice.")

def remove_targets(project_directory_path):
    remove_options = ["Remove single target", "Remove all targets"]
    print("Removing targets:")
    remove_terminal_menu = TerminalMenu(remove_options)
    remove_entry_index = remove_terminal_menu.show()
    print(f"You have selected {remove_options[remove_entry_index]}!")

    if remove_entry_index == 0:
        remove_single_target(project_directory_path)
    elif remove_entry_index == 1:
        remove_all_targets(project_directory_path)

def list_targets(project_directory_path):
    if not project_directory_path:
        print("Project directory path is not set.")
        return

    database_path = os.path.join(project_directory_path, "project_database.db")
    try:
        conn = sqlite3.connect(database_path)
        c = conn.cursor()
        c.execute("SELECT * FROM targets")
        targets = c.fetchall()
        print("Current targets:")
        for i, target in enumerate(targets):
            print(f"{i + 1}. {target[0]}")
    except sqlite3.Error as e:
        print("Error listing targets:", e)
    finally:
        if conn:
            conn.close()
